import { Admin } from './admin.model';
import { AdminService } from './admin.service';
import { AuthUser } from '../types/AuthUser';
import { InvitedUser } from './invited-user.model';
import { PubSubService } from '../pubsub/pubsub.service';
import { Team, TeamMember } from '../team/team.model';
import { PaginationArgs } from '../types/input-types.args';
import { AddUserToTeamArgs, ChangeUserRoleInTeamArgs } from './input-types.args';
export declare class AdminResolver {
    private adminService;
    private readonly pubsub;
    constructor(adminService: AdminService, pubsub: PubSubService);
    admin(admin: Admin): Admin;
    admins(): Promise<import("@prisma/client").User[]>;
    userInfo(userUid: string): Promise<AuthUser>;
    allUsers(admin: Admin, args: PaginationArgs): Promise<AuthUser[]>;
    invitedUsers(admin: Admin): Promise<InvitedUser[]>;
    allTeams(admin: Admin, args: PaginationArgs): Promise<Team[]>;
    teamInfo(admin: Admin, teamID: string): Promise<Team>;
    membersCountInTeam(admin: Admin, teamID: string): Promise<number>;
    collectionCountInTeam(admin: Admin, teamID: string): Promise<number>;
    requestCountInTeam(admin: Admin, teamID: string): Promise<number>;
    environmentCountInTeam(admin: Admin, teamID: string): Promise<number>;
    pendingInvitationCountInTeam(admin: Admin, teamID: string): Promise<import("@prisma/client").TeamInvitation[]>;
    usersCount(): Promise<number>;
    teamsCount(): Promise<number>;
    teamCollectionsCount(): Promise<number>;
    teamRequestsCount(): Promise<number>;
    inviteNewUser(adminUser: AuthUser, inviteeEmail: string): Promise<InvitedUser>;
    removeUserByAdmin(userUID: string): Promise<boolean>;
    makeUserAdmin(userUID: string): Promise<boolean>;
    removeUserAsAdmin(userUID: string): Promise<boolean>;
    createTeamByAdmin(adminUser: Admin, userUid: string, name: string): Promise<Team>;
    changeUserRoleInTeamByAdmin(adminUser: Admin, args: ChangeUserRoleInTeamArgs): Promise<TeamMember>;
    removeUserFromTeamByAdmin(adminUser: Admin, userUid: string, teamID: string): Promise<boolean>;
    addUserToTeamByAdmin(adminUser: Admin, args: AddUserToTeamArgs): Promise<TeamMember>;
    renameTeamByAdmin(adminUser: Admin, teamID: string, newName: string): Promise<Team>;
    deleteTeamByAdmin(teamID: string): Promise<boolean>;
    userInvited(admin: AuthUser): AsyncIterator<unknown, any, undefined>;
}
