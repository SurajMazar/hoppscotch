{"version":3,"file":"AudioLensRenderer.d9aaa287.js","sources":["../../../hoppscotch-common/src/components/lenses/renderers/AudioLensRenderer.vue"],"sourcesContent":["<template>\n  <div class=\"flex flex-col flex-1\">\n    <div\n      class=\"sticky z-10 flex items-center justify-between flex-shrink-0 pl-4 overflow-x-auto border-b bg-primary border-dividerLight top-lowerSecondaryStickyFold\"\n    >\n      <label class=\"font-semibold truncate text-secondaryLight\">\n        {{ t(\"response.body\") }}\n      </label>\n      <div class=\"flex\">\n        <HoppButtonSecondary\n          v-if=\"response.body\"\n          v-tippy=\"{ theme: 'tooltip', allowHTML: true }\"\n          :title=\"`${t(\n            'action.download_file'\n          )} <kbd>${getSpecialKey()}</kbd><kbd>J</kbd>`\"\n          :icon=\"downloadIcon\"\n          @click=\"downloadResponse\"\n        />\n      </div>\n    </div>\n    <div class=\"flex flex-1 items-center justify-center overflow-auto\">\n      <audio controls :src=\"audiosrc\"></audio>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed } from \"vue\"\nimport { useI18n } from \"@composables/i18n\"\nimport { useDownloadResponse } from \"@composables/lens-actions\"\nimport { HoppRESTResponse } from \"~/helpers/types/HoppRESTResponse\"\nimport { defineActionHandler } from \"~/helpers/actions\"\nimport { getPlatformSpecialKey as getSpecialKey } from \"~/helpers/platformutils\"\nimport { flow, pipe } from \"fp-ts/function\"\nimport * as S from \"fp-ts/string\"\nimport * as RNEA from \"fp-ts/ReadonlyNonEmptyArray\"\nimport * as A from \"fp-ts/Array\"\nimport * as O from \"fp-ts/Option\"\nimport { objFieldMatches } from \"~/helpers/functional/object\"\n\nconst t = useI18n()\n\nconst props = defineProps<{\n  response: HoppRESTResponse & {\n    type: \"success\" | \"fail\"\n  }\n}>()\n\nconst audiosrc = computed(() =>\n  URL.createObjectURL(\n    new Blob([props.response.body], {\n      type: \"audio/mp3\",\n    })\n  )\n)\n\nconst responseType = computed(() =>\n  pipe(\n    props.response,\n    O.fromPredicate(objFieldMatches(\"type\", [\"fail\", \"success\"] as const)),\n    O.chain(\n      // Try getting content-type\n      flow(\n        (res) => res.headers,\n        A.findFirst((h) => h.key.toLowerCase() === \"content-type\"),\n        O.map(flow((h) => h.value, S.split(\";\"), RNEA.head, S.toLowerCase))\n      )\n    ),\n    O.getOrElse(() => \"text/plain\")\n  )\n)\n\nconst { downloadIcon, downloadResponse } = useDownloadResponse(\n  responseType.value,\n  computed(() => props.response.body)\n)\n\ndefineActionHandler(\"response.file.download\", () => downloadResponse())\n</script>\n"],"names":["t","useI18n","audiosrc","computed","props","responseType","pipe","O.fromPredicate","objFieldMatches","O.chain","flow","res","A.findFirst","h","O.map","S.split","RNEA.head","S.toLowerCase","O.getOrElse","downloadIcon","downloadResponse","useDownloadResponse","defineActionHandler"],"mappings":"ikCAwCAA,EAAAC,IAQAC,EAAAC,EAAiB,IAAA,IAAA,gBACX,IAAA,KAAA,CAAAC,EAAA,SAAA,IAAA,EAAA,CAC8B,KAAA,WACxB,CAAA,CACP,CACH,EAGFC,EAAAF,EAAqB,IAAAG,EACnBF,EAAA,SACQG,EAAAC,EAAA,OAAA,CAAA,OAAA,SAAA,CAAA,CAAA,EAC+DC,EACnEC,EAEAC,GAAAA,EAAA,QACeC,EAAAC,GAAAA,EAAA,IAAA,YAAA,IAAA,cAAA,EAC4CC,EAAAJ,EAAAG,GAAAA,EAAA,MAAAE,EAAA,GAAA,EAAAC,EAAAC,CAAA,CAAA,CACS,CACpE,EACFC,EAAA,IAAA,YAAA,CAC8B,CAChC,EAGF,CAAA,aAAAC,EAAA,iBAAAC,CAAA,EAAAC,EAA2ChB,EAAA,MAC5BF,EAAA,IAAAC,EAAA,SAAA,IAAA,CACqB,EAGpC,OAAAkB,EAAA,yBAAA,IAAAF,EAAA,CAAA"}